import streamlit as st
import pandas as pd
from io import BytesIO
import matplotlib.pyplot as plt

st.set_page_config(page_title="Kaspi –ê–Ω–∞–ª–∏–∑ –ó–∞–∫–∞–∑–æ–≤", layout="wide")
st.title("üì¶ Kaspi –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞—Å—á–µ—Ç–æ–º –ø—Ä–∏–±—ã–ª–∏")

if "costs" not in st.session_state:
    st.session_state.costs = {}
if "search_query" not in st.session_state:
    st.session_state.search_query = ""
if "sort_by" not in st.session_state:
    st.session_state.sort_by = "–ö–æ–ª_–∑–∞–∫–∞–∑–æ–≤"

@st.cache_data
def load_data(uploaded_file):
    df = pd.read_excel(uploaded_file, sheet_name=0)
    df = df[[
        "–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
        "–ù–∞–∑–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "–ê—Ä—Ç–∏–∫—É–ª",
        "–°—É–º–º–∞",
        "–°—Ç–∞—Ç—É—Å",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞",
        "–°–∫–ª–∞–¥ –ø–µ—Ä–µ–¥–∞—á–∏ –ö–î"
    ]].copy()
    df.columns = [
        "–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
        "–ê—Ä—Ç–∏–∫—É–ª",
        "–°—É–º–º–∞",
        "–°—Ç–∞—Ç—É—Å",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "–î–æ—Å—Ç–∞–≤–∫–∞",
        "–°–∫–ª–∞–¥"
    ]
    df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] = pd.to_datetime(df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"], dayfirst=True, errors='coerce')
    warehouse_names = {
        "2667005_PP1": "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫",
        "2667005_PP24": "–ê–ª–º–∞—Ç—ã"
    }
    df["–°–∫–ª–∞–¥"] = df["–°–∫–ª–∞–¥"].replace(warehouse_names)
    return df

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏", type=["xlsx"])

if uploaded_file:
    df = load_data(uploaded_file)

    st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã")
    min_date = df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"].min()
    max_date = df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"].max()
    date_range = st.sidebar.date_input("–ü–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–∑–æ–≤", [min_date, max_date])

    returns_df = df[
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] >= pd.to_datetime(date_range[0])) &
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] <= pd.to_datetime(date_range[1])) &
        (df["–°—Ç–∞—Ç—É—Å"] == "–í–æ–∑–≤—Ä–∞—Ç")
    ]

    total_sales = df[
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] >= pd.to_datetime(date_range[0])) &
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] <= pd.to_datetime(date_range[1])) &
        (df["–°—Ç–∞—Ç—É—Å"] == "–í—ã–¥–∞–Ω")
    ]["–°—É–º–º–∞"].sum()

    html_stats = f"""
    <div style='background-color: #f5f5f5; padding: 1em; border-radius: 8px;'>
        <p style='margin-bottom: 0.5em;'>üîÅ <strong>–í–æ–∑–≤—Ä–∞—Ç–æ–≤:</strong> {len(returns_df)} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—É–º–º—É <strong>{returns_df['–°—É–º–º–∞'].sum():,.0f} ‚Ç∏</strong></p>
        <p style='margin-bottom: 0; font-size: 1.2em;'><strong>üíµ –û–±–æ—Ä–æ—Ç:</strong> {total_sales:,.0f} ‚Ç∏</p>
    </div>
    """
    st.sidebar.markdown(html_stats, unsafe_allow_html=True)

    issued_df = df[
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] >= pd.to_datetime(date_range[0])) &
        (df["–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞"] <= pd.to_datetime(date_range[1])) &
        (df["–°—Ç–∞—Ç—É—Å"] == "–í—ã–¥–∞–Ω")
    ]

    warehouses = issued_df["–°–∫–ª–∞–¥"].dropna().unique().tolist()
    selected_warehouses = st.sidebar.multiselect("–°–∫–ª–∞–¥—ã", warehouses, default=warehouses)
    filtered_df = issued_df[issued_df["–°–∫–ª–∞–¥"].isin(selected_warehouses)]

    st.sidebar.header("üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å")
    st.sidebar.text_input("üîé –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é", key="search_query")
    unique_products = filtered_df[["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]].drop_duplicates()
    search_query = st.session_state.search_query.lower().strip()
    if search_query:
        unique_products = unique_products[
            unique_products["–ê—Ä—Ç–∏–∫—É–ª"].str.lower().str.contains(search_query) |
            unique_products["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"].str.lower().str.contains(search_query)
        ]
    for i, (_, row) in enumerate(unique_products.iterrows()):
        art = row["–ê—Ä—Ç–∏–∫—É–ª"]
        name = row["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]
        default_cost = st.session_state.costs.get(art, 0.0)
        cost = st.sidebar.number_input(f"{name} ({art})", min_value=0.0, value=default_cost, step=100.0, key=f"cost_{art}_{i}")
        st.session_state.costs[art] = cost

    filtered_df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"] = filtered_df["–ê—Ä—Ç–∏–∫—É–ª"].apply(lambda art: st.session_state.costs.get(art, 0.0))
    filtered_df["–ß–∏—Å—Ç–∞—è –º–∞—Ä–∂–∞"] = (
        (filtered_df["–°—É–º–º–∞"] * 0.83)
        - (filtered_df["–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"] * filtered_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        - (filtered_df["–î–æ—Å—Ç–∞–≤–∫–∞"] * filtered_df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    )

    summary = filtered_df.groupby(["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–°–∫–ª–∞–¥"]).agg(
        –ö–æ–ª_–∑–∞–∫–∞–∑–æ–≤=("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "sum"),
        –°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂=("–°—É–º–º–∞", "sum"),
        –°—Ä–µ–¥–Ω—è—è_—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å=("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "mean"),
        –û–±—â–∞—è_–º–∞—Ä–∂–∞=("–ß–∏—Å—Ç–∞—è –º–∞—Ä–∂–∞", "sum")
    ).reset_index()

    summary = summary.sort_values(by="–ö–æ–ª_–∑–∞–∫–∞–∑–æ–≤", ascending=False)
    st.subheader("üìã –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º")
    st.dataframe(summary, use_container_width=True)

    st.markdown("## üåü –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤")
    sort_option = st.radio("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ:", ["–ö–æ–ª_–∑–∞–∫–∞–∑–æ–≤", "–°—É–º–º–∞_–ø—Ä–æ–¥–∞–∂", "–û–±—â–∞—è_–º–∞—Ä–∂–∞"], horizontal=True)
    top10 = summary.sort_values(by=sort_option, ascending=False).head(10)
    st.dataframe(top10, use_container_width=True)

    with st.expander("üìä –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º"):
        pie_data = filtered_df.groupby("–°–∫–ª–∞–¥")["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum()
        fig, ax = plt.subplots()
        ax.pie(pie_data, labels=pie_data.index, autopct="%1.1f%%", startangle=90)
        ax.axis("equal")
        st.pyplot(fig)

    to_excel = BytesIO()
    with pd.ExcelWriter(to_excel, engine="xlsxwriter") as writer:
        summary.to_excel(writer, index=False, sheet_name="–°–≤–æ–¥–∫–∞")
        filtered_df.to_excel(writer, index=False, sheet_name="–î–µ—Ç–∞–ª–∏")
    to_excel.seek(0)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Excel",
        data=to_excel,
        file_name="kaspi_otchet.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
